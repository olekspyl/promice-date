{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,OAAQJ,SAASC,cAAc,UAKjC,IAAII,EACAC,EACAC,EA4BJ,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,KAAUC,IAEpBG,EAAO,C,SAAEJ,E,KAAUC,GAAO,GAE3BD,EAAWC,EAAK,G,CAzCvBZ,EAAKM,OAAOa,iBAAiB,UAM7B,SAASC,EAAeC,GACtBA,EAAEC,iBACF,MAAMC,MAAEA,EAAKC,OAAEA,EAAQZ,KAAAa,GAASJ,EAAEK,cAAcC,SAChDpB,EAAckB,EAAKG,cACnBpB,EAAee,EAAMK,cACrBnB,EAAgBe,EAAOI,cAEvB,IAAK,IAAIC,EAAI,EAAGA,GAAKpB,EAAeoB,GAAK,EAClCrB,IACHD,GAAeA,GAEjBC,GAAgBD,EAEhBG,EAAcmB,EAAGrB,GACdsB,MAAK,EAACnB,SAAEA,EAAQC,KAAEA,MACjBd,EAAAiC,OAAOC,QAAQ,uBAAqBrB,QAAiBC,MAAS,IAE/DqB,OAAM,EAACtB,SAAEA,EAAQC,KAAEA,MAClBd,EAAAiC,OAAOG,QAAQ,sBAAoBvB,QAAeC,MAAS,IAIjEZ,EAAKM,OAAO6B,oBAAoB,SAAUf,GAC1CpB,EAAKM,OAAO8B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  inputDelay: document.querySelector('input[name=\"delay\"]'),\n  inputStep: document.querySelector('input[name=\"step\"]'),\n  inputAmount: document.querySelector('input[name=\"amount\"]'),\n  formEl: document.querySelector('.form'),\n};\n\nrefs.formEl.addEventListener('submit', onFormElSubmit);\n\nlet promiseStep;\nlet promiseDelay;\nlet promiseAmount;\n\nfunction onFormElSubmit(e) {\n  e.preventDefault();\n  const { delay, amount, step } = e.currentTarget.elements;\n  promiseStep = step.valueAsNumber;\n  promiseDelay = delay.valueAsNumber;\n  promiseAmount = amount.valueAsNumber;\n\n  for (let i = 1; i <= promiseAmount; i += 1) {\n    if (!promiseDelay) {\n      promiseStep += promiseStep;\n    }\n    promiseDelay += promiseStep;\n\n    createPromise(i, promiseDelay)\n      .then(({ position, step }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${step}ms`);\n      })\n      .catch(({ position, step }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${step}ms`);\n      });\n  }\n\n  refs.formEl.removeEventListener('submit', onFormElSubmit);\n  refs.formEl.reset();\n}\n\nfunction createPromise(position, step) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, step });\n      } else {\n        reject({ position, step });\n      }\n    }, position * step);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","inputDelay","document","querySelector","inputStep","inputAmount","formEl","$47d4ff9957288465$var$promiseStep","$47d4ff9957288465$var$promiseDelay","$47d4ff9957288465$var$promiseAmount","$47d4ff9957288465$var$createPromise","position","step","Promise","resolve","reject","setTimeout","Math","random","addEventListener","$47d4ff9957288465$var$onFormElSubmit","e","preventDefault","delay","amount","step1","currentTarget","elements","valueAsNumber","i","then","Notify","success","catch","failure","removeEventListener","reset"],"version":3,"file":"03-promises.4264928e.js.map"}